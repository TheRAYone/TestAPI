package ClienServerApp;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;

public class App {

    private final int port;

    public App(int port) {
        this.port = port;
    }

    public static void main(String[] args) {
        if (args.length < 1) {
            System.err.println("Usage: java jarname.jar portnumber");
        } else {
            new App(Integer.parseInt(args[0])).start();
        }
    }

    private void start() {
        System.out.println("Begin listening on port " + port);
        try (ServerSocket serverSocket = new ServerSocket(port)) {
            while (true) {
                Socket client = serverSocket.accept();
                new Thread(() -> handleClient(client)).start();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void handleClient(Socket client) {
        System.out.println("Accept client from " + client.getRemoteSocketAddress());
        try (InputStream inputStream = client.getInputStream();
             OutputStream outputStream = client.getOutputStream()) {
            while (true) {
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                byte[] buffer = new byte[256];
                int read = inputStream.read(buffer);
                if (read > 0) {
                    baos.write(buffer, 0, read);
                    while (inputStream.available() > 0) {
                        read = inputStream.read(buffer);
                        baos.write(buffer, 0, read);
                    }
                }
                if (baos.size() > 0) {
                    outputStream.write(answer(baos.toByteArray()));
                    outputStream.flush();
                }
                if (read < 0) {
                    break;
                }
            }
        } catch (Exception e) {
            System.err.println("Error while handle client");
            e.printStackTrace();
        } finally{
            try {
                client.close();
            } catch (IOException e) {
                System.err.println("Cannot close socket");
                e.printStackTrace();
            }
        }
        System.out.println("Client closed");
    }

    private byte[] answer(byte[] request) {
        return ("Server answer: " + new String(request)).getBytes();
    }
}
